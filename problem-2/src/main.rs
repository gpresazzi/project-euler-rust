use std::env;
use std::process;
/**
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
**/


fn fibonacci(n:u32) -> u32{
    if n == 0 {
        return 0;
    }
    if n == 1 {
        return 1;
    }

    return fibonacci(n - 1) + fibonacci(n - 2);
}

fn main() {
    let args: Vec<String> = env::args().collect();

    let mut it = 0;
    let mut fibonacci_result = 0;
    let mut found = false;
    let mut sum_even = 0;
    while found == false {
        fibonacci_result = fibonacci(it);
        it +=1;
        if fibonacci_result >= 4000000 {
            found = true
        }
        if fibonacci_result % 2 == 0 && found == false{
            sum_even += fibonacci_result;
        }
    }
    
    println!("Fibonacci {} is {}. Sum even-valued {}", it, fibonacci_result, sum_even);
}