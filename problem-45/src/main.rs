/**
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	 1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	 1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
**/

use std::time::Instant;

fn get_tringle_hexagone_value(max:u64, stop_at:u32) -> u64{

    let mut found = 0;
    for a in 1..max { 
        // starting from a
        // a(a+1)/2 = c(2c−1) -> 2c^2 - c - a(a+1)/2 = 0
        // a(a+1)/2 = k
        let a64 = a as f64;
        let k:f64 = (a64 * ( a64 + 1.0 )) / 2.0;
        let c:f64 = (1.0 + (1.0 + 8.0 * k).sqrt() ) / 4.0;

        //if c is integer
        if c == (c as u32) as f64 {
            println!("Found valid c: {:?} a:{:?}", c, a);

            let b:f64 = (1.0 + (1.0 + 24.0 * k).sqrt() ) / 6.0;

            if b == (b as u32) as f64 {
                println!("Found valid b: {:?} a:{:?}", b, a);

                found = found + 1;
                if found == stop_at {
                    return k as u64;
                }
            }
        }
    }
    return 1;
}

fn main() {
    let start_time = Instant::now();
    println!("Program start at: {:?}", start_time);

    let sum = get_tringle_hexagone_value(10_u64.pow(8), 3);

    println!("Result is : {}", sum);
    let elapsed = Instant::now() - start_time;
    println!("Program end at: {:?}, elapsed time: {:?}",  Instant::now(), elapsed);
}


// ################################# TEST #########################
#[test]
fn it_works() {
    let sum = get_tringle_hexagone_value(1000000, 2);
    assert_eq!(sum, 40755);
}